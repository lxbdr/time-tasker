// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TaskTemplate {
  id                 String              @id @default(cuid())
  name               String
  // relations
  checklistTemplates ChecklistTemplate[]
  instances          Task[]
}

model ChecklistTemplate {
  id              String           @id @default(cuid())
  name            String
  // relations
  taskTemplates    TaskTemplate[]
  bulletTemplates BulletTemplate[]
  instances       Checklist[]
}

model BulletTemplate {
  id                  String            @id @default(cuid())
  name                String
  checklistTemplate   ChecklistTemplate @relation(fields: [checklistTemplateId], references: [id])
  checklistTemplateId String
  instances           Bullet[]
}

model Task {
  id             String        @id @default(cuid())
  // relations
  taskTemplate   TaskTemplate? @relation(fields: [taskTemplateId], references: [id])
  taskTemplateId String?
  project        Project       @relation(fields: [projectId], references: [id])
  projectId      String
  checklists     Checklist[]
  // overrides
  name           String?
}

model Checklist {
  id                  String             @id @default(cuid())
  // relations
  task                Task               @relation(fields: [taskId], references: [id])
  taskId              String
  checklistTemplate   ChecklistTemplate? @relation(fields: [checklistTemplateId], references: [id])
  checklistTemplateId String?
  bullets             Bullet[]
  // overrides
  name                String?
}

model Bullet {
  id               String          @id @default(cuid())
  checked          Boolean
  // relations
  bulletTemplate   BulletTemplate? @relation(fields: [bulletTemplateId], references: [id])
  bulletTemplateId String?
  checklist        Checklist       @relation(fields: [checklistId], references: [id])
  checklistId      String
  // overrides
  name             String?
}

model Project {
  id    String @id @default(cuid())
  name  String
  tasks Task[]
}
